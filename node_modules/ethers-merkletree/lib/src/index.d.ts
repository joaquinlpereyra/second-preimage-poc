import { BigNumberish } from 'ethers';
export { default as WMerkleTree } from './WMerkleTree';
export declare type UIntTypes = 'uint256' | 'uint128' | 'uint64' | 'uint32' | 'uint16' | 'uint8' | 'uint4' | 'uint2' | 'uint1' | 'uint';
export declare type ByteTypes = 'bytes32' | 'bytes16' | 'bytes8' | 'bytes4' | 'bytes2' | 'bytes1' | 'byte' | 'bytes';
export declare type FunctionParameterType = 'string' | 'address' | 'bool' | UIntTypes | ByteTypes;
export declare type FunctionParameter = {
    name: string;
    type: FunctionParameterType;
};
export declare type LeafSignature = FunctionParameter[];
export declare type ObjectPropertyValue = {
    [key: string]: ObjectValue;
};
export declare type LeafSourceObject = {
    [key: string]: ObjectValue;
};
export declare type ObjectValue = string | BigNumberish | number | boolean;
export declare type LeafValues = ObjectValue[];
declare const _default: {
    blankFromType(type: string): ObjectValue;
    getBlankLeaf(leafSignature: LeafSignature): LeafValues;
    /**
     * Hash a leaf to be used in the merkle tree
     * @param values Leaf to hash
     * @returns Hash of the leaf
     */
    hashLeaf(values: ObjectValue[], signature: LeafSignature): string;
    getObjectValues(sourceItem: LeafSourceObject, signature: LeafSignature): LeafValues;
};
export default _default;
